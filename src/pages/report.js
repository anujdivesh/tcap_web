import React, { useEffect, useRef, useState } from 'react';
import L from 'leaflet';
import "./testmap.css";
import "./radio.css";
import { saveAs } from "file-saver";
import {mayFlyer,addShorelineImagenoPaneGen,addRisk, getChartOptions,getYaxis, addTVMarker} from "./helper";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { Bar} from 'react-chartjs-2';
import config from '../components/data/config.json'
import { useGlobalState,setGlobalState } from './globalstate';
import {
  Button,Modal
} from "react-bootstrap";
import {toast} from 'react-toastify';

const Report = () => {


  //model
  const [infoshow, setinfoshow] = useState(false);
  const [infotext, setinfotext] = useState(false);
  const handleinfo = () => {
    setinfoshow(false)
  };
  const handleClickImage= async(siteName) => {
    var text = '';
    if (siteName === "Return"){
      text = ['A ',<b>Return Period</b>,', also known as a recurrence interval or repeat interval, is an average time or an estimated average time between flood events. For example, a 5-year annual recurrence interval event, is a flood event that statistically occurs once every 5 years.',
     ];
    }
    if (siteName === "Time"){
      text = ['',<b>Time Horizon</b>,' refers to the time horizons considered here. Present Climate refers to the hazard assessment based on 1979 to 2022 ocean conditions. Sea level rise projections were obtained from the Pacific Region Infrastructure Facility (PRIF) Guidance for Managing Sea Level Rise Infrastructure Risk in Pacific Island Countries Report (2021). The report compiles sea level rise projections for most Pacific Island Countries based on the Intergovernmental Panel on Climate Change (IPCC) 6th Assessment Report (AR6). Here we consider two socioeconomic pathways (SSP2-4.5 and SSP5-8.5) for two different time horizons (2060 and 2100). The sea level rise projections were applied assuming no geomorphological changes to the islands or reefs.',
     ];
    }
    if (siteName === "Shared"){
      text = ['The 6th assessment report (AR6) of the Intergovernmental Panel for Climate Change (IPCC) utilizes data generated by the latest generation of global climate models, which were produced as part of the sixth Coupled Model Intercomparison Project (CMIP6). These collaborative endeavors involve the creation of simulations by numerous research groups worldwide, resulting in approximately 100 distinct climate models. In AR6, a new set of scenarios derived from ', <b>Shared Socioeconomic Pathways (SSPs)</b>,' is employed. The SSPs encompass five broad narratives that outline potential future socioeconomic development. These narratives are used to formulate scenarios related to energy usage, air pollution control, land use, and greenhouse gas emissions. Representative Concentration Pathways (RCPs) are then applied to these scenarios in order to achieve a roughly equivalent level of radiative forcing by the end of the 21st century.',<br/>,<br/>,
     'Here we consider the following two scenarios: Intermediate emissions scenario ', <b>(SSP2-4.5)</b>,': Approximately in line with the upper end of combined pledges under the Paris Agreement. The scenario “deviates mildly from a ‘no-additional climate-policy’ reference scenario, resulting in a best-estimate warming around 2.7 °C by the end of the 21st century”.',
    <br/>,<br/>,'Very High emissions scenario ', <b>(SSP5-8.5)</b>,': A high reference scenario with no additional climate policy. Emissions as high as SSP5–8.5 are only achieved within the fossil-fueled SSP5 socioeconomic development pathway.',
  <br/>];
    }
    if (siteName === "Asset"){
      text = [<b>Asset</b>,' represents things that hold value and significance that are exposed to hazards. This ranges from buildings, infrastructure to exposed people.',
     ];
    }
    if (siteName === "Impact"){
      text = [<u><b>Impact type:</b></u>,
      <br/>,<br/>,<b>% Exposed</b>,' - represent the percentage of assets (i.e. buildings or people) that are exposed to a coastal inundation hazard.',
      <br/>,<br/>,<b># Exposed</b>,' - represent the number of assets (i.e. buildings or people) exposed.',
      <br/>,<br/>,<b>Economic Damage</b>,' - is the expense that may incur from each hazard probability. This is determined through the replacement value of the buildings and using vulnerability functions to calculate the likely monetary damage value to the building.',
      <br/>,<br/>,<b>Annual Economic Damage</b>,' - also known as expected annual damage (EAD) is the expense that would occur in any given year if monetary damages from all the hazard probabilities were spread out equally over time. This does not mean that each year will produce the same damage but rather the possible monetary impact that might incur over time.',
      <br/>,<br/>,<b>% Building Damage</b>,' - is the mean percentage damage of buildings that are exposed to the hazard. This is calculated through vulnerability functions.',
     ];
    }

    setinfotext(text)
    setinfoshow(true)
  };
  ChartJS.register(
    CategoryScale,
    LinearScale,
    BarElement,
    Title,
    Tooltip,
    Legend,
    {
      id: 'no_data_label',
      beforeDraw: function (chart, easing) {
        var ctx = chart.ctx;
        ctx.save();
        ctx.fillStyle = "#ffffff";
        ctx.fillRect(0, 0, chart.width, chart.height);
        ctx.restore();
      }
  }
  );
  const nameer = useGlobalState("island_name");
  const shorelineLayer = useRef();
  const baseLayer = useRef();
  const layer3 = useRef();
  const _isMounted = useRef(true);
  const mapContainer = React.useRef(null);
  //const url_risk = "https://opm.gem.spc.int/tcap/risk-plots";
  const yearRef = useRef(5);
  const legendColorRef = useRef();
  const siteRef = useRef(nameer[0]);
  const horizonRef = useRef("2060");
  const climateRef = useRef("SSP2");
  const presentBoolRef = useRef(true);
  const [abool, setabool] = useState(false);
  const [economicbool, seteconomicbool] = useState(false);
  const [expo, setExpo] = useState(true);
  const [disableannual, setdisableannual] = useState(true);
  const [disableannual2, setdisableannual2] = useState(true);
  const [disableannual3, setdisableannual3] = useState(false);
  const assetRef = useRef("population");
  const typeRef = useRef("exposed");
  const siteRefBool = useRef(true);
  const [data, setData] = useState({labels:[],datasets:[]});
  
  const [displayShape, setDisplayShape] = useState(false);
  const risklayer = useRef();
  const [display2, setDisplay2] = useState(false);
  const [display3, setDisplay3] = useState(false);
  const [chartOptionsData, setChartOptionsData] = useState(getChartOptions);
  const baseurl = config['cgi-address']
  
  const chartOptions = (title, ylabel, xlabel, bool, isStacked) => {
    var yy ={
      min: 0,
      max: 100,
      stepSize: 20,
      stacked: false,
      ticks: {
        beginAtZero: true,
      },
      title: {
        display: true,
        text: ylabel
      }
    };
    if (!bool){
      yy ={
        stacked: false,
        ticks: {
          beginAtZero: true,
        },
        title: {
          display: true,
          text: ylabel
        }
      };
    }
    if (!isStacked){
      yy ={
        min: 0,
        max: 100,
        stepSize: 20,
        stacked: false,
        ticks: {
          beginAtZero: true,
        },
        title: {
          display: true,
          text: ylabel
        }
      };
    }
    setChartOptionsData({
      plugins: {
        tooltip: {
            callbacks: {
                label: function(context) {
                    var label = context.dataset.label || '';
                    var unit = '%';
                    if (!bool){
                      unit = '';
                    }
                    if (context.parsed.y !== null) {
                        label += ' ' +Math.round(context.parsed.y,1) + unit;
                    }
                    return label;
                }
            }
        },
        title: {
          display: true,
          text: title
      },
    },
      responsive: true,
      maintainAspectRatio: false,
      interaction: {
        mode: 'index',
        intersect: false,
      },
      scales: {
        x: {
          stacked: true,
          title: {
            display: true,
            text: xlabel
          }
        },
        y: yy,
      }
    
    
    });
  };
  /*
  const chart = (presentArr) => {
    setChartData({
      labels:["5","10","25", '50','100','250'],
      datasets:[{
        label:'Present',
        backgroundColor: 'rgb(53, 162, 235)',
        stack: 'Stack 1',
        data:presentArr
      
      },
      {
      label:'SSP2-4.5(2060)',
      backgroundColor: 'rgb(255, 99, 132)',
      stack: 'Stack 0',
        data:[8,5,4,8,5,4]
  
    },
    {
      label:'SSP2-4.5(2100)',
      backgroundColor: 'rgb(75, 192, 192)',
      stack: 'Stack 0',
      data:[20,50,30,20,50,30]
  
  },
  {
    label:'SSP2-4.5(2060)',
    backgroundColor: 'rgb(153, 102, 255)',
    stack: 'Stack 2',
      data:[8,5,4,8,5,4]
  
  },
  {
    label:'SSP2-4.5(2100)',
    backgroundColor: 'rgb(255, 159, 64)',
    stack: 'Stack 2',
    data:[100,100,100,100,100,100]
  
  }]
  });
  };
*/
  const fetchData= async(island, varib,yaxis,bool,isStacked)=> {
    const url = baseurl+"cgi-bin/Risk/test2.py?island="+island+"&var="+varib;
    //console.log(url)
    var presentArr = [];
var SSP452060 = [];
var SSP452100 = [];
var SSP852060 = [];
var SSP852100 = [];
  await fetch(url).then((data)=> {
      const res = data.json();
      return res
  }).then((res) => {
    var horizon = ['Present', 'SSP2-4.5(2060)', 'SSP2-4.5(2100)', 'SSP5-8.5(2060)', 'SSP5-8.5(2100)'];
    var return_periods = [5,10,25,50,100,250];

    for (let i = 0; i < res.length; ++i){
      var ARI = res[i]['ARI'];
      var Scenario = res[i]['Scenario'];
      var Percentage_Exposed_Population = res[i]['data'];
      var sss = Scenario.replace(/\s/g, "")
   // presentArr.push(i)
      
      for (let j = 0; j < return_periods.length; ++j){
        if (ARI === return_periods[j] && sss === horizon[0]){

          presentArr.push(Percentage_Exposed_Population)
        }
        if (ARI === return_periods[j] && sss === horizon[1]){

          SSP452060.push(Percentage_Exposed_Population)
        }
        if (ARI === return_periods[j] && sss === horizon[2]){
          if(isStacked){
          SSP452100.push(Percentage_Exposed_Population)}
          else{
            SSP452100.push(Percentage_Exposed_Population)
          }
        }
        if (ARI === return_periods[j] && sss === horizon[3]){

          SSP852060.push(Percentage_Exposed_Population)
        }
        if (ARI === return_periods[j] && sss === horizon[4]){
          if(isStacked){
          SSP852100.push(Percentage_Exposed_Population)}
          else{
            SSP852100.push(Percentage_Exposed_Population)
          }
        }
      }
  
    }
    chartOptions(yaxis[0], yaxis[1], yaxis[2], bool,isStacked)

    var stack1 = 'Stack 1';
    var stack0 = 'Stack 0';
    var stack3 = 'Stack 0';
    var stack2 = 'Stack 2';
    var stack4 = 'Stack 2';
    if (!isStacked){
      stack3 = 'Stack 3';
      stack4 = 'Stack 4';
    }
     setData({
      labels:["5","10","25", '50','100','250'],
      datasets:[{
        label:'Present',
        backgroundColor: '#fd7f6f',
        stack: stack1,
        data:presentArr
      
      },
      {
      label:'SSP2-4.5(2060)',
      backgroundColor: '#7eb0d5',
      stack: stack0,
        data:SSP452060
  
    },
    {
      label:'SSP5-8.5(2100)',
      backgroundColor: '#b2e061',
      stack: stack3,
      data:SSP452100
  
  },
  {
    label:'SSP2-4.5(2060)',
    backgroundColor: '#bd7ebe',
    stack: stack2,
      data:SSP852060
  
  },
  {
    label:'SSP5-8.5(2100)',
    backgroundColor: '#ffb55a',
    stack: stack4,
    data:SSP852100
  
  }]
  })
  }).catch(e => {
         console.log("error", e)
     })
 }

 const fetchDataAnnualNational= async(island, varib,yaxis,bool,isStacked)=> {
  const url = baseurl+"cgi-bin/Risk/annual.py?island=Tuvalu&var=Annual_Economic_Damage";

await fetch(url).then((data)=> {
    const res = data.json();
    return res
}).then((res) => {
  const present = res[0]['present'];
  const ssp4_2060 = res[0]['ssp4_2060'];
  const ssp4_2100 = res[0]['ssp4_2100'];
  const ssp8_2060 = res[0]['ssp8_2060'];
  const ssp8_2100 = res[0]['ssp8_2100'];

  chartOptions(yaxis[0], yaxis[1], yaxis[2], bool,isStacked)

  var stack1 = 'Stack 1';
  var stack0 = 'Stack 0';
  var stack3 = 'Stack 0';
  var stack2 = 'Stack 2';
  var stack4 = 'Stack 2';
  if (!isStacked){
    stack3 = 'Stack 3';
    stack4 = 'Stack 4';
  }
   setData({
    labels:["Tuvalu"],
    datasets:[{
      label:'Present',
      backgroundColor: '#fd7f6f',
      stack: stack1,
      data:[present]
    
    },
    {
    label:'SSP2-4.5(2060)',
    backgroundColor: '#7eb0d5',
    stack: stack0,
    data:[ssp4_2060]

  },
  {
    label:'SSP5-8.5(2100)',
    backgroundColor: '#b2e061',
    stack: stack3,
    data:[ssp4_2100]

},
{
  label:'SSP2-4.5(2060)',
  backgroundColor: '#bd7ebe',
  stack: stack2,
  data:[ssp8_2060]

},
{
  label:'SSP5-8.5(2100)',
  backgroundColor: '#ffb55a',
  stack: stack4,
  data:[ssp8_2100]

}]
})
}).catch(e => {
       console.log("error", e)
   })
}

const fetchDataAnnualIsland= async(island, varib,yaxis,bool,isStacked)=> {
  const url = baseurl+"cgi-bin/Risk/annual.py?island=island&var=Annual_Economic_Damage";
  var presentArr = [];
  var SSP452060 = [];
  var SSP452100 = [];
  var SSP852060 = [];
  var SSP852100 = [];
await fetch(url).then((data)=> {
    const res = data.json();
    return res
}).then((res) => {

    for (let i = 0; i < res.length; ++i){
      var present = res[i]['present'];
      var ssp4_2060 = res[i]['ssp4_2060'];
      var ssp4_2100 = res[i]['ssp4_2100'];
      var ssp8_2060 = res[i]['ssp8_2060'];
      var ssp8_2100 = res[i]['ssp8_2100'];
      
      presentArr.push(present)
      SSP452060.push(ssp4_2060)
      SSP452100.push(ssp4_2100)
      SSP852060.push(ssp8_2060)
      SSP852100.push(ssp8_2100)
    }

  chartOptions(yaxis[0], yaxis[1], yaxis[2], bool,isStacked)

  var stack1 = 'Stack 1';
  var stack0 = 'Stack 0';
  var stack3 = 'Stack 0';
  var stack2 = 'Stack 2';
  var stack4 = 'Stack 2';
  if (!isStacked){
    stack3 = 'Stack 3';
    stack4 = 'Stack 4';
  }
   setData({
    labels:["Funafuti","Nanumea","Nanumaga","Nui","Niutao","Niulakita","Nukulaelae","Nukufetau","Vaitupu"],
    datasets:[{
      label:'Present',
      backgroundColor: '#fd7f6f',
      stack: stack1,
      data:presentArr
    
    },
    {
    label:'SSP2-4.5(2060)',
    backgroundColor: '#7eb0d5',
    stack: stack0,
    data:SSP452060

  },
  {
    label:'SSP5-8.5(2100)',
    backgroundColor: '#b2e061',
    stack: stack3,
    data:SSP452100

},
{
  label:'SSP2-4.5(2060)',
  backgroundColor: '#bd7ebe',
  stack: stack2,
  data:SSP852060

},
{
  label:'SSP5-8.5(2100)',
  backgroundColor: '#ffb55a',
  stack: stack4,
  data:SSP852100

}]
})

}).catch(e => {
       console.log("error", e)
   })
}

 const fetchDataCountry= async(retur, asset, type, horizon, gender,yaxis,bool,isStacked)=> {
  var namee = gender+"-";
  if (gender === 'SSP2'){
    namee += "4.5(";
  }
  else{
    namee += "8.5(";
  }
  if (horizon ==='present'){
    namee = 'Present';
  }
  else{
    namee+=horizon+")";
  }
  const url = baseurl+"cgi-bin/Risk/country.py?island="+retur+"&var="+asset+"_"+type+"&scenario="+namee;
  var presentArr = [];
await fetch(url).then((data)=> {
    const res = data.json();
    return res
}).then((res) => {

  for (let i = 0; i < res.length-1; ++i){
    var prev = res[i]['data'];
    presentArr.push(prev)

  }
 // console.log(yaxis)
  //var title = yaxis[0]+" ["+retur+" year "+namee+"]";
  var title = yaxis[0]+" ["+retur+" year]";
  chartOptions(title, yaxis[1], yaxis[2], bool,isStacked)

  var stack1 = 'Stack 1';
   setData({
    labels:["Funafuti","Nanumaga","Nanumea", 'Niulakita','Niutao','Nui','Nukufetau','Nukulaelae','Vaitupu'],
    datasets:[{
      label:namee,
      backgroundColor: '#c86558',
      stack: stack1,
      data:presentArr
    
    }]
})
}).catch(e => {
       console.log("error", e)
   })
}

const onClickShow3= async(siteName) => {
  siteRef.current = siteName;

 // siteRef.current = e.target.value;
  setHorizon('present')

  setdisableannual(true)
  if (siteName !== "Tuvalu"){
   // setCountry('island')
    setDisplayShape(true)
    setDisplay2(true)
    setDisplay3(true)
    if (assetRef.current === "population"){
      setExpo(true)
    }
    else{
      setExpo(false)
    }

  }
  else{
    setDisplay2(false)
    setDisplay3(true)
    setDisplayShape(false)
    setExpo(false)
    setCountry('island')

  }
  setAsset('population')
  setType('exposed')
 // setdisableannual(true)
  setExpo(true)
  fetchData(siteName, "population_exposed", getYaxis(siteName,'population','exposed'),true,true);



  if (siteName !== "Tuvalu"){
    //setDisplay2(true)
    siteRefBool.current = false;
   
  }
  else{
    //setDisplay2(false)
    siteRefBool.current = true;
    
  }

  seteconomicbool(false)
  if (shorelineLayer.current != null){
  mapContainer.current.removeLayer(shorelineLayer.current);
  }
  if (layer3.current != null){
    mapContainer.current.removeLayer(layer3.current);
    }
  shorelineLayer.current = addShorelineImagenoPaneGen(mapContainer.current, siteRef.current)
  //layer2.current =  getMarker(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current,display3,country)
  mayFlyer(mapContainer.current, siteRef.current);

  if (siteName !== "Tuvalu"){
    risklayer.current = addRisk(mapContainer.current, siteRef.current, yearRef.current,climateRef.current, presentBoolRef.current, horizonRef.current, 'risk')
 
  }
  else{
    mapContainer.current.eachLayer(function (layer) {
      
      if (layer.defaultOptions != null){
        if (layer.defaultOptions.id === "risk"){
          mapContainer.current.removeLayer(layer);
        }
      }
   });
  }
  mapContainer.current.eachLayer(function (layer) {
    const layername = layer.options.id;
    console.log(layername)
    if(layername === 777){
      mapContainer.current.removeLayer(layer);
    }
  });
  setGlobalState("island_name", siteName);
};



  function initMap(){
       baseLayer.current = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
         attribution: '&copy; Pacific Community (OSM)',
         detectRetina: true
     });
   
     mapContainer.current = L.map('map', {
       zoom: 7,
       center: [-6.287321, 176.320346]
     });
     baseLayer.current.addTo(mapContainer.current); 
      //Legend Note
  legendColorRef.current = L.control({ position: "bottomleft", id:22 });
  legendColorRef.current.onAdd = function() {
          var div = L.DomUtil.create("div", "legend");
          div.innerHTML += "<img src="+require('./north.png')+" alt='Legend' width='50px' height='50px'>";
          div.style.backgroundColor = "transparent";
          //
         // div.style.width = '50px';
          
         return div;
        };
        legendColorRef.current.addTo(mapContainer.current);
   //  layer2.current =  getMarker(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current,display3,country)
  

   if (nameer[0] === "Tuvalu"){

  //  displayRef2.current = false;
   toast.info('Click on marker to zoom.', {position: toast.POSITION.BOTTOM_CENTER, autoClose:6000})
    layer3.current = addTVMarker(mapContainer.current, "Nanumaga").on('click', function(e) {onClickShow3('Nanumaga')}).bindTooltip("Nanumaga", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Nanumea").on('click', function(e) {onClickShow3('Nanumea')}).bindTooltip("Nanumea", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Funafuti").on('click', function(e) {onClickShow3('Funafuti')}).bindTooltip("Funafuti", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Nui").on('click', function(e) {onClickShow3('Nui')}).bindTooltip("Nui", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Nukufetau").on('click', function(e) {onClickShow3('Nukufetau')}).bindTooltip("Nukufetau", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Niutao").on('click', function(e) {onClickShow3('Niutao')}).bindTooltip("Niutao", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Nukulaelae").on('click', function(e) {onClickShow3('Nukulaelae')}).bindTooltip("Nukulaelae", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Vaitupu").on('click', function(e) {onClickShow3('Vaitupu')}).bindTooltip("Vaitupu", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Niulakita").on('click', function(e) {onClickShow3('Niulakita')}).bindTooltip("Niulakita", {permanent:true,opacity:0.65});
    }
    else{

shorelineLayer.current = addShorelineImagenoPaneGen(mapContainer.current, siteRef.current)

mayFlyer(mapContainer.current, siteRef.current);

L.control.scale().addTo(mapContainer.current);
    }

     }
   useEffect(() => {  
     
   if (_isMounted.current){
   
     initMap();
   handleSite2(nameer[0])
//fetchDataCountry(yearRef.current, asset,type,horizon, gender, getYaxis('Tuvalu',asset,type),true, true);
   }  
   return () => { _isMounted.current = false }; 
   },[]);
   
const handleSite=(e)=>{
  if (e.target.value === "Tuvalu"){
  //  displayRef2.current = false;
    toast.info('Click on marker to zoom.', {position: toast.POSITION.BOTTOM_CENTER, autoClose:6000})
    if(risklayer.current !== null){
        mapContainer.current.removeLayer(risklayer.current);
    }
    if(layer3.current !== null){
        mapContainer.current.removeLayer(mapContainer.current);
    }
    if(shorelineLayer.current !== null){
        mapContainer.current.removeLayer(shorelineLayer.current);
    }
        layer3.current = addTVMarker(mapContainer.current, "Nanumaga").on('click', function(e) {onClickShow3('Nanumaga')}).bindTooltip("Nanumaga", {permanent:true,opacity:0.65});
        layer3.current = addTVMarker(mapContainer.current, "Nanumea").on('click', function(e) {onClickShow3('Nanumea')}).bindTooltip("Nanumea", {permanent:true,opacity:0.65});
        layer3.current = addTVMarker(mapContainer.current, "Funafuti").on('click', function(e) {onClickShow3('Funafuti')}).bindTooltip("Funafuti", {permanent:true,opacity:0.65});
        layer3.current = addTVMarker(mapContainer.current, "Nui").on('click', function(e) {onClickShow3('Nui')}).bindTooltip("Nui", {permanent:true,opacity:0.65});
        layer3.current = addTVMarker(mapContainer.current, "Nukufetau").on('click', function(e) {onClickShow3('Nukufetau')}).bindTooltip("Nukufetau", {permanent:true,opacity:0.65});
        layer3.current = addTVMarker(mapContainer.current, "Niutao").on('click', function(e) {onClickShow3('Niutao')}).bindTooltip("Niutao", {permanent:true,opacity:0.65});
        layer3.current = addTVMarker(mapContainer.current, "Nukulaelae").on('click', function(e) {onClickShow3('Nukulaelae')}).bindTooltip("Nukulaelae", {permanent:true,opacity:0.65});
        layer3.current = addTVMarker(mapContainer.current, "Vaitupu").on('click', function(e) {onClickShow3('Vaitupu')}).bindTooltip("Vaitupu", {permanent:true,opacity:0.65});
        layer3.current = addTVMarker(mapContainer.current, "Niulakita").on('click', function(e) {onClickShow3('Niulakita')}).bindTooltip("Niulakita", {permanent:true,opacity:0.65});
    
        mapContainer.current.eachLayer(function (layer) {
          if (layer.defaultOptions != null){
            if (layer.defaultOptions.id === "risk"){
              mapContainer.current.removeLayer(layer);
            }
          }
       });
        setDisplay2(false)
        setDisplay3(true)
        setDisplayShape(false)
        setExpo(false)
        setCountry('island')
        mayFlyer(mapContainer.current, 'Tuvalu');
        siteRef.current = e.target.value;
      }
  else{
//var random = Array.from({length: 3}, () => Math.floor(Math.random() * 40));
  //chart(random);
  //chartOptions('Anuj Divesh')
  mapContainer.current.eachLayer(function (layer) {
    const layername = layer.options.id;
    console.log(layername)
    if(layername === 777){
      mapContainer.current.removeLayer(layer);
    }
  });
  
  siteRef.current = e.target.value;
  setHorizon('present')

  setdisableannual(true)
  if (e.target.value !== "Tuvalu"){
   // setCountry('island')
    setDisplayShape(true)
    setDisplay2(true)
    setDisplay3(true)
    if (assetRef.current === "population"){
      setExpo(true)
    }
    else{
      setExpo(false)
    }

  }
  else{
    setDisplay2(false)
    setDisplay3(true)
    setDisplayShape(false)
    setExpo(false)
    setCountry('island')

  }
  setAsset('population')
  setType('exposed')
 // setdisableannual(true)
  setExpo(true)
  fetchData(e.target.value, "population_exposed", getYaxis(e.target.value,'population','exposed'),true,true);



  if (e.target.value !== "Tuvalu"){
    //setDisplay2(true)
    siteRefBool.current = false;
   
  }
  else{
    //setDisplay2(false)
    siteRefBool.current = true;
    
  }

  seteconomicbool(false)
  if (shorelineLayer.current != null){
  mapContainer.current.removeLayer(shorelineLayer.current);
  }
 // if (layer2.current != null){
   // mapContainer.current.removeLayer(layer2.current);
    //}
  shorelineLayer.current = addShorelineImagenoPaneGen(mapContainer.current, siteRef.current)
  //layer2.current =  getMarker(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current,display3,country)
  mayFlyer(mapContainer.current, siteRef.current);

  if (e.target.value !== "Tuvalu"){
    risklayer.current = addRisk(mapContainer.current, siteRef.current, yearRef.current,climateRef.current, presentBoolRef.current, horizonRef.current, 'risk')
 
  }
  else{
    mapContainer.current.eachLayer(function (layer) {
      if (layer.defaultOptions != null){
        if (layer.defaultOptions.id === "risk"){
          mapContainer.current.removeLayer(layer);
        }
      }
   });
  }
}
  setGlobalState("island_name", e.target.value);
}

const handleSite2=(e)=>{
  //var random = Array.from({length: 3}, () => Math.floor(Math.random() * 40));
    //chart(random);
    //chartOptions('Anuj Divesh')
    siteRef.current = e;
    setHorizon('present')
    if (e !== "Tuvalu"){
     // setCountry('island')
      setDisplayShape(true)
      setDisplay2(true)
      setDisplay3(true)
      if (assetRef.current === "population"){
        setExpo(true)
      }
      else{
        setExpo(false)
      }
  
    }
    else{
      setDisplay2(false)
      setDisplay3(true)
      setDisplayShape(false)
      setExpo(false)
      setCountry('island')
  
    }
    setAsset('population')
    setType('exposed')
    setExpo(true)
    fetchData(e, "population_exposed", getYaxis(e,'population','exposed'),true,true);
  
  
  
    if (e !== "Tuvalu"){
      //setDisplay2(true)
      siteRefBool.current = false;
     
    }
    else{
      //setDisplay2(false)
      siteRefBool.current = true;
      
    }
  
    seteconomicbool(false)
    if (shorelineLayer.current != null){
    mapContainer.current.removeLayer(shorelineLayer.current);
    }
   // if (layer2.current != null){
     // mapContainer.current.removeLayer(layer2.current);
      //}
    shorelineLayer.current = addShorelineImagenoPaneGen(mapContainer.current, siteRef.current)
    //layer2.current =  getMarker(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current,display3,country)
    mayFlyer(mapContainer.current, siteRef.current);
  
    if (e !== "Tuvalu"){
      risklayer.current = addRisk(mapContainer.current, siteRef.current, yearRef.current,climateRef.current, presentBoolRef.current, horizonRef.current, 'risk')
   
    }
    else{
      mapContainer.current.eachLayer(function (layer) {
        if (layer.defaultOptions != null){
          if (layer.defaultOptions.id === "risk"){
            mapContainer.current.removeLayer(layer);
          }
        }
     });
    }
     
  }
  
const [gender, setGender] = useState("SSP2");



const [horizon, setHorizon] = useState("present");



const [asset, setAsset] = useState("population");
const [country, setCountry] = useState("tuvalu");

const [type, setType] = useState("exposed");
function onChangeValueAsset(e) {
  if (country === 'island' || siteRef.current !== "Tuvalu"){
    if (e.target.value === 'population'){
      setdisableannual(true)
      fetchData(siteRef.current, e.target.value+"_exposed",getYaxis(siteRef.current,e.target.value,type),true,true);
    }
    else{
      if(siteRef.current !== "Tuvalu"){
        setdisableannual(true)
      }
      else{
      setdisableannual(false)
      }
    fetchData(siteRef.current, e.target.value+"_"+type,getYaxis(siteRef.current,e.target.value,type),true,true);
    }
  }
  else{
   
    if(siteRef.current !== "Tuvalu"){
      setdisableannual2(true)
      setdisableannual3(false)
    }
    else{
      if (e.target.value === 'population'){
        setdisableannual2(true)
        setdisableannual3(false)
      }
      else{
    setdisableannual2(false)
    //console.log(typeRef.current)
    if (typeRef.current === "annual"){
    setdisableannual3(true)
    }
    else{
      setdisableannual3(false)
    }
      }
    }
    fetchDataCountry("5", e.target.value,'exposed',horizon, gender, getYaxis('Tuvalu',e.target.value,'exposed'),true, true);
  }

 // if (siteRef.current !== "Tuvalu"){
    if (e.target.value === "population"){
      setExpo(true)
      typeRef.current= 'exposed';
      setType("exposed")
    }
    else{
      setdisableannual(false)
      setExpo(false)
    }
 
  setAsset(e.target.value);
  assetRef.current = e.target.value
//mapContainer.current.removeLayer(layer2.current);
//layer2.current =  getMarker(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current,display3,country)
//mayFlyer(mapContainer.current, siteRef.current);

 e.currentTarget.blur();
}


function onChangeValueTV(e) {
  setType('exposed');
  setAsset('population')
  setType('exposed')
  setdisableannual3(false);
  var view = type;
  if (type === 'annual'){
    view = 'exposed'
  }
   if (e.target.value !== "tuvalu"){
    fetchData(siteRef.current, asset+"_"+view,getYaxis(siteRef.current,asset,view),true,true);
    setDisplay3(true)
   }
   else{
  fetchDataCountry("5", 'population','exposed',horizon, gender, getYaxis('Tuvalu','population','exposed'),true, true);
    setDisplay3(false)
   // view = false;
   }
 //    if (e.target.value === "population"){
   //    setExpo(true)
     //  typeRef.current= 'exposed';
       //setType("exposed")
    // }
     //else{
      // setExpo(false)
     //}
  
   setCountry(e.target.value);
 
  e.currentTarget.blur();
 }


function onChangeValueType(e) {
  var vool, stacked = true;
  if (e.target.value === 'damanged'){
    stacked = false
  }
  if (e.target.value === "numexposed" || e.target.value === 'economicdamage'){
    vool = false
  }
 
  if (e.target.value === "annual"){

    setdisableannual3(true)
    //setabool(true)
    if (country === 'tuvalu'){
      vool = false
      fetchDataAnnualIsland(siteRef.current, asset+"_"+e.target.value,getYaxis(siteRef.current,asset,e.target.value),vool,stacked);
    }
    else{
    vool = false
    fetchDataAnnualNational(siteRef.current, asset+"_"+e.target.value,getYaxis(siteRef.current,asset,e.target.value),vool,stacked);
    }
  }
  else{
    setdisableannual3(false)
    setabool(false)
    if (country === 'island'|| siteRef.current !== "Tuvalu"){

      fetchData(siteRef.current, asset+"_"+e.target.value,getYaxis(siteRef.current,asset,e.target.value),vool,stacked);
    }
    else{
  
      fetchDataCountry("5", asset,e.target.value,horizon, gender, getYaxis('Tuvalu',asset,e.target.value),true, true);
    }
  
  }
/*
  if (e.target.value === "annualeconomic"){
    seteconomicbool(true)
  }
  else{
    seteconomicbool(false)
  }*/
  setType(e.target.value);
    presentBoolRef.current = false;
    typeRef.current = e.target.value;
//mapContainer.current.removeLayer(layer2.current);
//layer2.current =  getMarker(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current,display3,country)
//mayFlyer(mapContainer.current, siteRef.current);
 e.currentTarget.blur();
}

//Tuvalu Scale


const handleYear=(e)=>{
  yearRef.current = e.target.value;
  //mapContainer.current.removeLayer(layer2.current);
 // layer2.current =  getMarker(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current,display3,country)
  //mayFlyer(mapContainer.current, siteRef.current);
 

    fetchDataCountry(e.target.value, asset,type,horizon, gender, getYaxis('Tuvalu',asset,type),true, true);
 // }
 
}

function onChangeValue(e) {
  setGender(e.target.value);
  climateRef.current = e.target.value
    presentBoolRef.current = false;
//mapContainer.current.removeLayer(layer2.current);
//layer2.current =  getMarker(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current,display3,country)
//mayFlyer(mapContainer.current, siteRef.current);

fetchDataCountry(yearRef.current, asset,type,horizon, e.target.value, getYaxis('Tuvalu',asset,type),true, true);
 e.currentTarget.blur();
}


function onChangeValueHorizon(e) {
  setHorizon(e.target.value);
  horizonRef.current = e.target.value

  if (e.target.value !== "present"){
    presentBoolRef.current = false;
 // yearRef.current = e.target.value;
//mapContainer.current.removeLayer(layer2.current);
//layer2.current =  getMarker(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current,display3,country)
//mayFlyer(mapContainer.current, siteRef.current);

}
else{
 // setHorizon2('present')
  presentBoolRef.current = true;
 // mapContainer.current.removeLayer(layer2.current);
 // layer2.current =  getMarker(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current,display3,country)
  //mayFlyer(mapContainer.current, siteRef.current);

}

fetchDataCountry(yearRef.current, asset,type,e.target.value, gender, getYaxis('Tuvalu',asset,type),true, true);
 e.currentTarget.blur();
}




//Buildings Shapefile *************************
const handleYearShape=(e)=>{
  yearRef.current = e.target.value;
  mapContainer.current.eachLayer(function (layer) {
    if (layer.defaultOptions != null){
      if (layer.defaultOptions.id === "risk"){
        mapContainer.current.removeLayer(layer);
      }
    }
 });
  risklayer.current = addRisk(mapContainer.current, siteRef.current, yearRef.current,climateRef.current, presentBoolRef.current, horizonRef.current, 'risk')
  
 
}

function onChangeValueHorizonShape(e) {
  setHorizon(e.target.value);
  horizonRef.current = e.target.value

  if (e.target.value !== "present"){
    presentBoolRef.current = false;
    mapContainer.current.eachLayer(function (layer) {
      if (layer.defaultOptions != null){
        if (layer.defaultOptions.id === "risk"){
          mapContainer.current.removeLayer(layer);
        }
      }
   });
    risklayer.current = addRisk(mapContainer.current, siteRef.current, yearRef.current,climateRef.current, presentBoolRef.current, horizonRef.current, 'risk')
    
   

}
else{
  presentBoolRef.current = true;
  mapContainer.current.eachLayer(function (layer) {
    if (layer.defaultOptions != null){
      if (layer.defaultOptions.id === "risk"){
        mapContainer.current.removeLayer(layer);
      }
    }
 });
  risklayer.current = addRisk(mapContainer.current, siteRef.current, yearRef.current,climateRef.current, presentBoolRef.current, horizonRef.current, 'risk')
  
 

}
 e.currentTarget.blur();
}
function onChangeValueShape(e) {
  setGender(e.target.value);
  climateRef.current = e.target.value
    presentBoolRef.current = false;
//mapContainer.current.removeLayer(layer2.current);
//layer2.current =  getMarker(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current)
mapContainer.current.eachLayer(function (layer) {
  if (layer.defaultOptions != null){
    if (layer.defaultOptions.id === "risk"){
      mapContainer.current.removeLayer(layer);
    }
  }
});
risklayer.current = addRisk(mapContainer.current, siteRef.current, yearRef.current,climateRef.current, presentBoolRef.current, horizonRef.current, 'risk')



 e.currentTarget.blur();
}


const handleSubmit=(e)=>{
/*  saveAs(
    getURL(mapContainer.current, siteRef.current, url_risk,assetRef.current,typeRef.current,siteRef.current,yearRef.current,climateRef.current,presentBoolRef.current,horizonRef.current,display3,country),
    "risk.png"
  );
*/
const canvasSave = document.getElementById('stack');
canvasSave.toBlob(function (blob) {
    saveAs(blob, "Export.png")
})

e.currentTarget.blur();
}

const handleSubmit2=(e)=>{
  e.preventDefault();
  window.location.href=baseurl+'cgi-bin/risk_data.csv';
  e.currentTarget.blur();
  }

  return (
    <>
    <div className="container-fluid">
    <div className="row" style={{height:"93.5vh"}}>
    <div className="col-sm-2"  style={{backgroundColor:"#efefef",padding:0}}>

    <div className="card">
    <div className="card-body" style={{fontSize:"13px"}}>
   
      <div className="row" style={{marginTop:'-10px'}}>
    <div className="col-sm-6">

    <p>Sites:</p>
      </div>
      <div className="col-sm-6">
      <select className="form-select form-select-sm" value={siteRef.current} aria-label=".form-select-sm example" onChange={handleSite} style={{fontSize:'13px', paddingLeft:1}}>
      <option value="Tuvalu">Tuvalu</option>
  <option value="Nanumaga">Nanumaga</option>
  <option value="Nanumea">Nanumea</option>
  <option value="Funafuti">Funafuti</option>
  <option value="Niulakita">Niulakita</option>
  <option value="Niutao">Niutao</option>
  <option value="Nui">Nui</option>
  <option value="Nukufetau">Nukufetau</option>
  <option value="Nukulaelae">Nukulaelae</option>
  <option value="Vaitupu">Vaitupu</option>
</select>
      </div>
      </div>
      {display2 ?
      null
 : <>
 <hr style={{marginTop:0}}/>
 <div className="row" style={{marginTop:'-10px'}}>
 <div className="col-sm-6">

<div className="form-check">
     <input type="radio" className="form-check-input" value="island" id="island"
  name="country" onChange={onChangeValueTV} checked={country === "island"}/>
<label>National Scale</label>
</div>
</div>
<div className="col-sm-6">
<div className="form-check">
             <input type="radio" className="form-check-input" value="tuvalu" id="tuvalu"
           name="country" onChange={onChangeValueTV} checked={country === "tuvalu"}/>
        <label>Island Scale</label>
        </div>
 </div>

 </div>
 </>}
      <hr style={{marginTop:0}}/>
      <div className="row" style={{marginTop:'-10px'}}>
    <div className="col-sm-6">

    <p>Asset: <input alt="loading.." onClick={function(e) {handleClickImage('Asset')}} type="image" src={require('./info.png')} style={{marinTop:"50px", width:"15px", height:"15px"}}/></p>
      </div>
      <div className="col-sm-6">
      <div className="form-check">
                  <input type="radio" className="form-check-input" value="population" id="population"
                name="asset" onChange={onChangeValueAsset} checked={asset === "population"} disabled={abool || economicbool} />
             <label>Population</label>
             </div>
             <div className="form-check">
                  <input type="radio" className="form-check-input" value="building" id="building"
               name="asset" onChange={onChangeValueAsset} checked={asset === "building"} disabled={abool || economicbool} />
             <label>Buildings</label>
             </div>
      </div>
      </div>
      <hr style={{marginTop:0}}/>
      <div className="row" style={{marginTop:'-10px'}}>
    <div className="col-sm-6">

    <p>Impact Type: <input alt="loading.." onClick={function(e) {handleClickImage('Impact')}} type="image" src={require('./info.png')} style={{marinTop:"10px", width:"15px", height:"15px"}}/></p>
      </div>
      <div className="col-sm-6">
      <div className="form-check">
                  <input type="radio" className="form-check-input" value="exposed" id="exposed"
                name="type" onChange={onChangeValueType} checked={type === "exposed"} />
                {display3 ?
             <label>% Exposed</label>
             : <label>Exposed</label>}
             </div>
             {display3 ?
             null
             : 
             <div className="form-check">
              <input type="radio" className="form-check-input" value="annual" id="annual"
              name="type" onChange={onChangeValueType} checked={type === "annual"} disabled={ disableannual2}/>
              <label style={{fontSize:'11px'}}>Annual Economic Damaged</label>
              </div>
             }

             <>{display3 ?
             <>
              <div className="form-check">
                  <input type="radio" className="form-check-input" value="numexposed" id="numexposed"
                name="type" onChange={onChangeValueType} checked={type === "numexposed"} disabled={ expo}/>
             <label># Exposed</label>
             </div>
            
             <div className="form-check">
                  <input type="radio" className="form-check-input" value="economicdamage" id="economicdamage"
               name="type" onChange={onChangeValueType} checked={type === "economicdamage"} disabled={ expo}/>
             <label>Economic Damage</label>
             </div>

              <div className="form-check">
              <input type="radio" className="form-check-input" value="damanged" id="damanged"
              name="type" onChange={onChangeValueType} checked={type === "damanged"} disabled={ expo}/>
              <label>% Damaged</label>
              </div>
              <div className="form-check">
              <input type="radio" className="form-check-input" value="annual" id="annual"
              name="type" onChange={onChangeValueType} checked={type === "annual"} disabled={ disableannual}/>
              <label style={{fontSize:'11px'}}>Annual Economic Damaged</label>
              </div>
              </>
              : null}
              </>
             
             
             
      </div>
      </div>
     
      {display3 || display2 ?
      null
 : <>
      <hr style={{marginTop:0}}/>
     

      <div className="row"style={{marginTop:'-7px'}}>
<div className="col-sm-6">

<p>Return Period: <input alt="loading.." onClick={function(e) {handleClickImage('Return')}} type="image" src={require('./info.png')} style={{marinTop:"10px", width:"15px", height:"15px"}}/></p>
  </div>

  <div className="col-sm-6">
  <select disabled={disableannual3} className="form-select form-select-sm" aria-label=".form-select-sm example" onChange={handleYear} id="Year2" name="Year2" style={{fontSize:'13px', paddingLeft:1}}>
<option value="5">5 Year</option>
<option value="10">10 Year</option>
<option value="25">25 Year</option>
<option value="50">50 Year</option>
<option value="100">100 Year</option>
<option value="250">250 Year</option>
</select>

</div>

  </div>
  <hr style={{marginTop:0}}/>
      <div className="row" style={{marginTop:'-10px'}}>
    <div className="col-sm-6">

    <p>Time Horizon: <input alt="loading.." onClick={function(e) {handleClickImage('Time')}} type="image" src={require('./info.png')} style={{marinTop:"10px", width:"15px", height:"15px"}}/></p>
      </div>
      <div className="col-sm-6">

      <div className="form-check">
                  <input type="radio" className="form-check-input" value="present" id="present"
               name="horizonShape" onChange={onChangeValueHorizon} checked={horizon === "present"} disabled={ economicbool || disableannual3}/>
             <label>Present Climate </label>
             </div>
      <div className="form-check">
                  <input type="radio" className="form-check-input" value="2060" id="2060"
                name="horizonShape" onChange={onChangeValueHorizon} checked={horizon === "2060"} disabled={ economicbool || disableannual3}/>
             <label>2060</label>
             </div>
             <div className="form-check">
                  <input type="radio" className="form-check-input" value="2100" id="2100"
                name="horizonShape" onChange={onChangeValueHorizon} checked={horizon === "2100"} disabled={ economicbool || disableannual3}/>
             <label>2100</label>
             </div>
      </div>
      </div>
      <hr style={{marginTop:0}}/>
      <div className="row" style={{marginTop:'-10px'}}>
    <div className="col-sm-6">

    <p style={{fontSize:'11.5px'}}>Shared Socioeconomic Pathway: <input alt="loading.." onClick={function(e) {handleClickImage('Shared')}} type="image" src={require('./info.png')} style={{marinTop:"10px", width:"15px", height:"15px"}}/></p>
      </div>
      <div className="col-sm-6">
      <div className="form-check">
                  <input type="radio" className="form-check-input" value="SSP2" id="SSP2"
                name="climateShape" onChange={onChangeValue} checked={gender === "SSP2"} disabled={presentBoolRef.current || economicbool || disableannual3}/>
             <label>SSP2 4.5</label>
             </div>
             <div className="form-check">
                  <input type="radio" className="form-check-input" value="SSP5" id="SSP5"
               name="climateShape" onChange={onChangeValue} checked={gender === "SSP5"} disabled={presentBoolRef.current || economicbool || disableannual3}/>
             <label>SSP5 8.5</label>
             </div>
      </div>
      </div>

    
     </>}

    
    
    </div>
  </div>




  {displayShape ?
      <>
        <div className="row" style={{marginTop:'10px', marginBottom:'-15px'}}>
        <div className="col-sm-12" style={{marginLeft:'15px'}}>
          <p style={{fontSize:'13px'}}>Building Shapefile:</p>
          </div>
          </div>
  <div className="card"  style={{marginTop:"0px"}}>
    <div className="card-body" style={{fontSize:"13px"}}>
  
      <div className="row"style={{marginTop:'0px'}}>
<div className="col-sm-6">

<p>Return Period: <input alt="loading.." onClick={function(e) {handleClickImage('Return')}} type="image" src={require('./info.png')} style={{marinTop:"10px", width:"15px", height:"15px"}}/></p>
  </div>

  <div className="col-sm-6">
  <select className="form-select form-select-sm" aria-label=".form-select-sm example" onChange={handleYearShape} id="Year2" name="Year2" style={{fontSize:'13px', paddingLeft:1}}>
<option value="5">5 Year</option>
<option value="10">10 Year</option>
<option value="25">25 Year</option>
<option value="50">50 Year</option>
<option value="100">100 Year</option>
<option value="250">250 Year</option>
</select>

</div>

  </div>
  <hr style={{marginTop:0}}/>
      <div className="row" style={{marginTop:'-10px'}}>
    <div className="col-sm-6">

    <p>Time Horizon: <input alt="loading.." onClick={function(e) {handleClickImage('Time')}} type="image" src={require('./info.png')} style={{marinTop:"10px", width:"15px", height:"15px"}}/></p>
      </div>
      <div className="col-sm-6">

      <div className="form-check">
                  <input type="radio" className="form-check-input" value="present" id="present"
               name="horizonShape" onChange={onChangeValueHorizonShape} checked={horizon === "present"} disabled={ economicbool}/>
             <label>Present Climate </label>
             </div>
      <div className="form-check">
                  <input type="radio" className="form-check-input" value="2060" id="2060"
                name="horizonShape" onChange={onChangeValueHorizonShape} checked={horizon === "2060"} disabled={ economicbool}/>
             <label>2060</label>
             </div>
             <div className="form-check">
                  <input type="radio" className="form-check-input" value="2100" id="2100"
                name="horizonShape" onChange={onChangeValueHorizonShape} checked={horizon === "2100"} disabled={ economicbool}/>
             <label>2100</label>
             </div>
      </div>
      </div>
      <hr style={{marginTop:0}}/>
      <div className="row" style={{marginTop:'-10px'}}>
    <div className="col-sm-6">

    <p style={{fontSize:'11.5px'}}>Shared Socioeconomic Pathway: <input alt="loading.." onClick={function(e) {handleClickImage('Shared')}} type="image" src={require('./info.png')} style={{marinTop:"10px", width:"15px", height:"15px"}}/></p>
      </div>
      <div className="col-sm-6">
      <div className="form-check">
                  <input type="radio" className="form-check-input" value="SSP2" id="SSP2"
                name="climateShape" onChange={onChangeValueShape} checked={gender === "SSP2"} disabled={presentBoolRef.current || economicbool }/>
             <label>SSP2 4.5</label>
             </div>
             <div className="form-check">
                  <input type="radio" className="form-check-input" value="SSP5" id="SSP5"
               name="climateShape" onChange={onChangeValueShape} checked={gender === "SSP5"} disabled={presentBoolRef.current || economicbool}/>
             <label>SSP5 8.5</label>
             </div>
      </div>
      </div>
      </div>
      </div>
      </>
 : null}
    </div>
    <div className="col-sm-10" style={{padding:0}}>
    <div id="map" ref={mapContainer} className="map"></div>
    <div className="container">

    <pre><code className="javascript" id="code"></code></pre>
    <div className="row"style={{marginTop:'0px', height:'350px'}}>
    {

<Bar id="stack" options={chartOptionsData} data={data}/>

    }
</div>
<div className="row"style={{marginTop:'10px', textAlign:'center'}}>

<div className="col-sm-8">

</div>
<div className="col-sm-2">
  

<button type="button" className="btn btn-primary" onClick={handleSubmit2}>Export CSV</button>

</div>
<div className="col-sm-2">
  

<button type="button" className="btn btn-primary" onClick={handleSubmit}>Export PNG</button>

</div>
</div>
</div>

</div>
</div>
<Modal show={infoshow} onHide={handleinfo} size="lg">
    <Modal.Header>
      Information
      </Modal.Header>
      
        <Modal.Body>
        <p style={{fontSize:'12px'}}>{infotext}</p>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleinfo}>
            Close
          </Button>
         
        </Modal.Footer>
      </Modal>
    </div>
</>
  );

};

export default Report;
